-# set up variables used in other (later) views testing for banner-rotator

- # @use_rotator is true if the gem continaing banner-rotator is installed
- @use_rotator = Module.constants.include? :BannerRotator

- # @banner_gallery is list of page-images within the gallery
- @banner_gallery = ( @use_rotator ? get_banner_gallery( @page )  :  [] )

- # @need_banner will be true if banner-rotator installed and the gallery is non empty
- @need_banner =  ( @use_rotator && !@banner_gallery.empty? )

- @_banner_nominal = RefinerySetting.get(:gardenia_banner_nominal)

- if @need_banner
  = stylesheet_link_tag 'wt-rotator'
  = javascript_include_tag 'jquery.wt-rotator.min.js'

- if @user_event_calendars
  %script{ :type => "text/javascript", :src => "https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js" }
  = javascript_include_tag 'jshashtable-2.1.js'
  = javascript_include_tag 'jquery-frontier-cal-1.3.2.js'
  = stylesheet_link_tag 'jquery-frontier-cal-1.3.2'

:javascript
  $(document).ready(function(){
  
    $("ul.dropdown li").dropdown();  // jquery menus
    $('blockquote, .blockquote').quovolver();     // jquery quote evolver
    
     // options setup for banner rotator (whether included or not)
    var rotator_options = {
          width:#{RefinerySetting.get(:gardenia_banner_width)},
          height:#{RefinerySetting.get(:gardenia_banner_height)},
          button_width:24,
          button_height:24,
          button_margin:4,
          auto_start:true,
          delay:#{RefinerySetting.get(:gardenia_banner_delay)},
          transition:"#{RefinerySetting.get(:gardenia_banner_transition)}",
          transition_speed:800,
          auto_center:false,
          cpanel_align:"BR",
          cpanel_position:"inside",
          timer_align:"top",
          display_thumbs:false,
          display_dbuttons:false,
          display_playbutton:false,           
          display_numbers:false,
          display_timer:false,
          tooltip_type:"image",
          mouseover_pause:false,
          cpanel_mouseover:false,
          text_mouseover:false,
          text_effect:"fade",
          text_sync:true,
          shuffle:false,
          block_size:75,
          vert_size:55,
          horz_size:50,
          block_delay:25,
          vstripe_delay:75,
          hstripe_delay:75
    };
    
    // banner rotator referenced only if needed
    #{ "// Use rotator: #{@use_rotator.to_s}; Banner gallery pages: #{@banner_gallery.size.to_s}"}
    #{'$(".container").wtRotator( rotator_options );' if @need_banner }
    
    $("a[rel='image-gallery']").colorbox({transition:"none", width:"75%", height:"75%"});
  
  });
  
    // fancy menu stuff
  $.fn.dropdown = function() {
  
    $(this).hover(function(){
      $(this).addClass("hover");
      $('> .dir',this).addClass("open");
      $('ul:first',this).css('visibility', 'visible');
    },function(){
      $(this).removeClass("hover");
      $('.open',this).removeClass("open");
      $('ul:first',this).css('visibility', 'hidden');
    });
  
  }

- if @user_event_calendars
  :javascript
    /**
     * Initializes calendar.
     */
    var jfcalplugin = $("#mycal").jFrontierCal({
            date: new Date(),
            dayClickCallback: myDayClickHandler,
            agendaClickCallback: myAgendaClickHandler,
            agendaDropCallback: myAgendaDropHandler,
            // agendaMouseoverCallback: myAgendaMouseoverHandler,
            applyAgendaTooltipCallback: myApplyTooltip,
            agendaDragStartCallback : myAgendaDragStart,
            agendaDragStopCallback : myAgendaDragStop,
            dragAndDropEnabled: true
    }).data("plugin");

    // jfcalplugin.loadICalData("#mycal", #{= EventCalendar.get_remote_events( RefinerySetting.find_or_set( :event_calendar_url, "event_calendar_url") ) } );	

    function myDayClickHandler(eventObj){
            var date = eventObj.data.calDayDate;
            alert("You clicked day " + date.toDateString());
    };
    function myAgendaClickHandler (eventObj){
            var agendaId = eventObj.data.agendaId;
    };
    function myAgendaDropHandler(eventObj){
            var agendaId = eventObj.data.agendaId;
            var date = eventObj.data.calDayDate;		
            var agendaItem = jfcalplugin.getAgendaItemById("#mycal",agendaId);		
            alert("You dropped agenda item " + agendaItem.title + 
                    " onto " + date.toString() + ". Here is where you can make an AJAX call to update your database.");
    };	
    
    /**
     * Do something when dragging starts on agenda div
     */
    function myAgendaDragStart(eventObj,divElm,agendaItem){
            // destroy our qtip tooltip
            if(divElm.data("qtip")){
                    divElm.qtip("destroy");
            }	
    };

    /**
     * Do something when dragging stops on agenda div
     */
    function myAgendaDragStop(eventObj,divElm,agendaItem){
            //alert("drag stop");
    };

    /**
     * Custom tooltip - use any tooltip library you want to display the agenda data.
     *
     * For this example we use qTip - http://craigsworks.com/projects/qtip/
     *
     * @param divElm - jquery object for agenda div element
     * @param agendaItem - javascript object containing agenda data.
     */
    function myApplyTooltip(divElm,agendaItem){

            // Destroy currrent tooltip if present
            if(divElm.data("qtip")){
                    divElm.qtip("destroy");
            }
            
            var displayData = "";
            
            var title = agendaItem.title;
            var startDate = agendaItem.startDate;
            var endDate = agendaItem.endDate;
            var allDay = agendaItem.allDay;
            var data = agendaItem.data;
            displayData += "<br><b>" + title+ "</b><br><br>";
            if(allDay){
                    displayData += "(All day event)<br><br>";
            }else{
                    displayData += "<b>Starts:</b> " + startDate + "<br>" + "<b>Ends:</b> " + endDate + "<br><br>";
            }
            for (var propertyName in data) {
                    displayData += "<b>" + propertyName + ":</b> " + data[propertyName] + "<br>"
            }
            // apply tooltip
            divElm.qtip({
                    content: displayData,
                    position: {
                            corner: {
                                    tooltip: "bottomMiddle",
                                    target: "topMiddle"			
                            },
                            adjust: { 
                                    mouse: true,
                                    x: 0,
                                    y: -15
                            },
                            target: "mouse"
                    },
                    show: { 
                            when: { 
                                    event: 'mouseover'
                            }
                    },
                    style: {
                            border: {
                                    width: 5,
                                    radius: 10
                            },
                            padding: 10, 
                            textAlign: "left",
                            tip: true,
                            name: "dark"
                    }
            });

       };

